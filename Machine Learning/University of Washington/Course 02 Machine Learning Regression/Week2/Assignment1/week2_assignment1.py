# -*- coding: utf-8 -*-
"""Week2 Assignment1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1s7C_BvRWoLWTz_YSy0uk3ZJhLM24vbHR
"""

!pip install turicreate

import turicreate
from turicreate import SFrame

"""# 1. import turicreate and load in the house data"""

sales = turicreate.SFrame('/content/drive/My Drive/Colab Notebooks/Machine Learning/Course 2 Machine Learning Regression/Week2/Assignment1/home_data.sframe')

"""# 2. Split into training and test data"""

train_data, test_data = sales.random_split(.8, seed=0)

"""# 3. Although we often think of multiple regression as including multiple different features (e.g. # of bedrooms, square feet, and # of bathrooms) but we can also consider transformations of existing variables e.g. the log of the square feet or even "interaction" variables such as the product of bedrooms and bathrooms. Add 4 new variables in both your train_data and test_data."""

from math import log

train_data['bedrooms_squared'] = train_data['bedrooms']*train_data['bedrooms']
train_data['bed_bath_rooms'] = train_data['bedrooms']*train_data['bathrooms']
train_data['log_sqft_living'] = train_data['sqft_living'].apply(lambda x : log(x))
train_data['lat_plus_long'] = train_data['lat'] + train_data['long']

test_data['bedrooms_squared'] = test_data['bedrooms']*test_data['bedrooms']
test_data['bed_bath_rooms'] = test_data['bedrooms']*test_data['bathrooms']
test_data['log_sqft_living'] = test_data['sqft_living'].apply(lambda x : log(x))
test_data['lat_plus_long'] = test_data['lat'] + test_data['long']

"""*   Squaring bedrooms will increase the separation between not many bedrooms (e.g. 1) and lots of bedrooms (e.g. 4) since 1^2 = 1 but 4^2 = 16. Consequently this variable will mostly affect houses with many bedrooms.

*  Bedrooms times bathrooms is what's called an "interaction" variable. It is large when both of them are large.

*   Taking the log of square feet has the effect of bringing large values closer together and spreading out small values.

*   Adding latitude to longitude is non-sensical but we will do it anyway (you'll see why)

# 4. **Quiz Question:** what are the mean (arithmetic average) values of your 4 new variables on TEST data? (round to 2 digits)
"""

print('Bedroom_squared mean : ',test_data['bedrooms_squared'].mean())
print('bed_bath_rooms mean : ',test_data['bed_bath_rooms'].mean())
print('log_sqft_living mean : ',test_data['log_sqft_living'].mean())
print('lat_plus_long mean : ',test_data['lat_plus_long'].mean())

"""#5. 
Use 
    `turicreate.linear_regression.create()` 
  (or any other regression library/function) to estimate the regression coefficients/weights for predicting ‘price’ for the following three models:(In all 3 models include an intercept -- most software does this by default).

Model 1: ‘sqft_living’, ‘bedrooms’, ‘bathrooms’, ‘lat’, and ‘long’

Model 2: ‘sqft_living’, ‘bedrooms’, ‘bathrooms’, ‘lat’,‘long’, and ‘bed_bath_rooms’

Model 3: ‘sqft_living’, ‘bedrooms’, ‘bathrooms’, ‘lat’,‘long’, ‘bed_bath_rooms’, ‘bedrooms_squared’, ‘log_sqft_living’, and ‘lat_plus_long’

You’ll note that the three models here are “nested” in that all of the features of the Model 1 are in Model 2 and all of the features of Model 2 are in Model 3.

If you use 
    
    `turicreate.linear_regression.create()` 
  to estimate these models please ensure that you set validation_set = None. This way you will get the same answer every time you run the code.

Learn all three models on the TRAINING data set. Save your model results for quiz questions later.
"""

model_1_features = ['sqft_living', 'bedrooms', 'bathrooms', 'lat', 'long']
model_2_features = model_1_features + ['bed_bath_rooms']
model_3_features = model_2_features + ['bedrooms_squared', 'log_sqft_living', 'lat_plus_long']

model_1 = turicreate.linear_regression.create(train_data, 
                                              target = 'price',
                                              features = model_1_features,
                                              validation_set = None)

model_2 = turicreate.linear_regression.create(train_data, 
                                              target = 'price',
                                              features = model_2_features,
                                              validation_set = None)

model_3 = turicreate.linear_regression.create(train_data, 
                                              target = 'price',
                                              features = model_3_features,
                                              validation_set = None)

"""#6. **Quiz Question:** What is the sign (positive or negative) for the coefficient/weight for ‘bathrooms’ in Model 1?

#7. **Quiz Question:** What is the sign (positive or negative) for the coefficient/weight for ‘bathrooms’ in Model 2?

#8. Is the sign for the coefficient the same in both models?
"""

print('Model_1 : ',model_1.coefficients)
print('Model_2 : ',model_2.coefficients)
print('Model_3 : ',model_3.coefficients)

"""#9. Now using your three estimated models compute the RSS (Residual Sum of Squares) on the Training data.

#10. **Quiz Question:** Which model (1, 2 or 3) had the lowest RSS on TRAINING data?
"""

print('Model_1 :',model_1.evaluate(train_data))
print('Model_2 :',model_2.evaluate(train_data))
print('Model_3 :',model_3.evaluate(train_data))

"""#11. Now using your three estimated models compute the RSS on the Testing data

12. **Quiz Question:** Which model (1, 2, or 3) had the lowest RSS on TESTING data?
"""

print('Model_1 :',model_1.evaluate(test_data))
print('Model_2 :',model_2.evaluate(test_data))
print('Model_3 :',model_3.evaluate(test_data))

