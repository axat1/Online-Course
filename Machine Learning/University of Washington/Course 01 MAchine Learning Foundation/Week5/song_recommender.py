# -*- coding: utf-8 -*-
"""Song Recommender.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WZ_zM08dPfixupREzaIboU20lc86q4Fv
"""

!pip install turicreate

import turicreate

"""#**Load music data**"""

song_data = turicreate.SFrame('/content/drive/My Drive/Colab Notebooks/Machine Learning/Week5/Practice/song_data.sframe')

"""#**Explore Data**"""

song_data.head()

song_data['song'].show()

len(song_data)

"""## **Count number of user**"""

users = song_data['user_id'].unique()

len(users)

"""# **Create a song recommender**"""

train_data,test_data = song_data.random_split(.8,seed=0)

"""## **Simple popularity-based recommender**"""

popularity_model = turicreate.popularity_recommender.create(train_data, 
                                                            user_id='user_id',
                                                            item_id='song')

"""### **Use popularity_model to make some predictions**
#### in this model each and every user gets recommendetion of same songs
"""

popularity_model.recommend(users=[users[0]])

popularity_model.recommend(users=[users[1]])

"""## **Build a song recommender with personalization**"""

personalized_model = turicreate.item_similarity_recommender.create(train_data,
                                                                   user_id='user_id',
                                                                   item_id='song')

"""### **Applying the personalized model to make song recommandations**"""

personalized_model.recommend(users=[users[0]])

personalized_model.recommend(users=[users[1]])

"""#### Get the similar items(song)"""

personalized_model.get_similar_items(['With Or Without You - U2'])

personalized_model.get_similar_items(['Chan Chan (Live) - Buena Vista Social Club'])

"""# **Quantitative comparison between the model**"""

# Commented out IPython magic to ensure Python compatibility.
#import matplotlib
# %matplotlib inline

model_performance = turicreate.recommender.util.compare_models(test_data,
                                                               [popularity_model,personalized_model],
                                                               user_sample=0.05)

"""# **Find unique Users who listen following artists**

1.   Kanye West
2.   Foo Fighters
3.   Taylor Swift
4.   Lady GaGa
"""

#users_west = song_data['user_id'].unique()
users_west = song_data[song_data['artist'] == 'Kanye West']

len(users_west['user_id'].unique())

#users_west.show()

users_foo = song_data[song_data['artist'] == 'Foo Fighters']

len(users_foo['user_id'].unique())

users_taylor = song_data[song_data['artist'] == 'Taylor Swift']

len(users_taylor['user_id'].unique())

users_gaga = song_data[song_data['artist'] == 'Lady Gaga']

len(users_gaga['user_id'].unique())

"""# **Using groupby-aggregate to find the most popular and least popular artist**"""

total_count = song_data.groupby('artist', operations={'total_count': turicreate.aggregate.SUM('listen_count')})

total_count = total_count.sort('total_count',ascending=False)

total_count

"""## Most popular artist"""

total_count[0]

"""## Least popular artist"""

total_count[-1]

"""#**Using groupby-aggregate to find the most recommended songs**
###  we are going to make recommendations for the users in the test data
"""

subset_test_users = test_data['user_id'].unique()[0:10000]

"""## Letâ€™s compute one recommended song for each of these test users"""

personalized_model.recommend(subset_test_users,k=1)

"""## use .groupby() to find the most recommended song"""

operations={'total_count': turicreate
.aggregate.SUM('listen_count')}

"""## count how often each song is recommended"""

operations={'count': turicreate.aggregate.COUNT()}

test_count_total = song_data.groupby(key_column_names='song', operations={'count': turicreate.aggregate.COUNT()})

test_count_total = test_count_total.sort('count',ascending=False)
test_count_total

test_count_total[-1]

